[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd = 'Dein'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # vimヘルプ日本語化
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = '''
" if hidden is not set, TextEdit might fail.
set hidden
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nmap <silent> <leader>[ <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> <leader>] <Plug>(coc-references)
" Remap for rename current word
nmap <leader>r <Plug>(coc-rename)
" Remap for do codeAction of current line
" nmap <leader>i  <Plug>(coc-codeaction)
nmap <leader>i :<C-u>execute 'CocCommand actions.open'<CR>
nmap <silent> <expr><leader><Space> ":<C-u>call CocActionAsync('doHover')<CR>"
nmap <leader>d :<C-u>CocList diagnostics<CR>

" Start coc.nvim when vim launches
au VimEnter * CocStart
'''
hook_post_update = '''
CocInstall coc-tsserver
CocInstall coc-angular
CocInstall coc-prettier
CocInstall coc-eslint
CocInstall coc-json
CocInstall coc-html
CocInstall coc-css
CocInstall coc-clangd
CocInstall coc-actions
CocInstall coc-rls
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap <silent> <leader>x
  \ :<C-u>Defx
  \ -auto-cd
  \ -split=vertical
  \ -direction=topleft
  \ -winwidth=50
  \ -listed -resume 
  \ -show-ignored-files
  \ -columns=icons:indent:filename:type
  \ -buffer-name=tab`tabpagenr()`<CR>
'''
hook_source = '''
call defx#custom#column('mark', {
        \ 'readonly_icon': '✗',
        \ 'selected_icon': '✓',
        \ })
call defx#custom#column('icon', {
        \ 'directory_icon': '▸',
        \ 'opened_icon': '▾',
        \ 'root_icon': ' ',
        \ })
'''
depends = ['defx-icons']

[[plugins]]
repo = 'kristijanhusak/defx-icons'
hook_add = '''
let g:defx_icons_enable_syntax_highlight = 1
let g:defx_icons_column_length = 2
let g:defx_icons_directory_icon = ''
let g:defx_icons_mark_icon = '*'
let g:defx_icons_parent_icon = ''
let g:defx_icons_default_icon = ''
let g:defx_icons_directory_symlink_icon = ''
" Options below are applicable only when using "tree" feature
let g:defx_icons_root_opened_tree_icon = ''
let g:defx_icons_nested_opened_tree_icon = ''
let g:defx_icons_nested_closed_tree_icon = ''
'''

[plugins.ftplugin]
defx = '''
" Define mappings
nnoremap <silent><buffer><expr> <CR>
\ defx#async_action('multi', ['drop', 'quit'])
nnoremap <silent><buffer><expr> c
\ defx#do_action('copy')
nnoremap <silent><buffer><expr> !
\ defx#do_action('execute_command')
nnoremap <silent><buffer><expr> m
\ defx#do_action('move')
nnoremap <silent><buffer><expr> p
\ defx#do_action('paste')
nnoremap <silent><buffer><expr> l
\ defx#async_action('drop')
nnoremap <silent><buffer><expr> <C-j>
\ defx#do_action('multi', [['drop', 'vsplit'], 'quit'])
nnoremap <silent><buffer><expr> <C-k>
\ defx#do_action('multi', [['drop', 'split'], 'quit'])
nnoremap <silent><buffer><expr> P
\ defx#do_action('open', 'pedit')
nnoremap <silent><buffer><expr> o
\ defx#async_action('open_or_close_tree')
nnoremap <silent><buffer><expr> O
\ defx#async_action('open_tree_recursive')
nnoremap <silent><buffer><expr> K
\ defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N
\ defx#do_action('new_file')
nnoremap <silent><buffer><expr> M
\ defx#do_action('new_multiple_files')
nnoremap <silent><buffer><expr> C
\ defx#do_action('toggle_columns', 'mark:filename:type:size:time')
nnoremap <silent><buffer><expr> S
\ defx#do_action('toggle_sort', 'Time')
nnoremap <silent><buffer><expr> se
\ defx#do_action('add_session')
nnoremap <silent><buffer><expr> sl
\ defx#do_action('load_session')
nnoremap <silent><buffer><expr> d
\ defx#do_action('remove_trash')
nnoremap <silent><buffer><expr> r
\ defx#do_action('rename')
nnoremap <silent><buffer><expr> x
\ defx#do_action('execute_system')
nnoremap <silent><buffer><expr> >
\ defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> .
\ defx#do_action('repeat')
nnoremap <silent><buffer><expr> yy
\ defx#do_action('yank_path')
nnoremap <silent><buffer><expr> h
\ defx#async_action('cd', ['..'])
nnoremap <silent><buffer><expr> ~
\ defx#async_action('cd')
nnoremap <silent><buffer><expr> \
\ defx#do_action('cd', getcwd())
nnoremap <silent><buffer><expr> q
\ defx#do_action('quit')
nnoremap <silent><buffer><expr> <Space>
\ defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> *
\ defx#do_action('toggle_select_all')
nnoremap <silent><buffer><expr> j
\ line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k
\ line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> <C-l>
\ defx#do_action('redraw')
xnoremap <silent><buffer><expr> <CR>
\ defx#do_action('toggle_select_visual')
nnoremap <silent><buffer><expr> <C-g>
\ defx#do_action('print')
nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
\ ':<C-u>wincmd w<CR>' :
\ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
'''

[[plugins]]
repo = 'alvan/vim-closetag'
on_ft = ['html']

