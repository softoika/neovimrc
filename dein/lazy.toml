[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd = 'Dein'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <silent><C-n> :NERDTreeToggle<CR>
'''

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # vimヘルプ日本語化
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''
on_i = 1

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
" カレントディレクトリ
nnoremap <silent> <expr><Space>p ":Denite file/rec -split='floating'<CR>"
" バッファ一覧
nnoremap <silent> <expr><Space>o ":Denite buffer -split='floating'<CR>"
" 最近使ったファイルの一覧
nnoremap <silent> <expr><Space>l ":Denite file/old -split='floating'<CR>"

"Denite でバッファ内検索 
nnoremap <silent> <expr><Space>f ":<C-u>Denite grep<CR>"
nnoremap <silent> <expr><Space>g ":<C-u>DeniteCursorWord grep<CR>"

" Define mappings
autocmd FileType denite call s:denite_keymaps()
function! s:denite_keymaps() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> a
  \ denite#do_map('choose_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> '
  \ denite#do_map('quick_move')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

autocmd FileType denite-filter call s:filter_settings()
function! s:filter_settings() abort
  imap <silent><buffer> jj <Plug>(denite_filter_quit)q
  imap <silent><buffer> <C-n> <Plug>(denite_filter_quit)ji
  imap <silent><buffer> <C-p> <Plug>(denite_filter_quit)ki
  inoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
  inoremap <silent><buffer> <C-j> <Esc><C-w>p
  call deoplete#custom#buffer_option('auto_complete', v:false)
endfunction

'''
hook_source = '''
let s:denite_options = {
      \ 'prompt' : '>',
      \ 'split': 'floating',
      \ 'start_filter': 1,
      \ 'auto_resize': 1,
      \ 'source_names': 'short',
      \ 'direction': 'botright',
      \ 'highlight_filter_background': 'CursorLine',
      \ 'highlight_matched_char': 'Type',
      \ }
call denite#custom#option('default', s:denite_options)
" TODO: agに変える(file/recだとagの方が早いらしい :h denite)
if executable('rg')
  call denite#custom#var('file/rec', 'command',
        \ ['rg', '--hidden', '--files', '--glob', '!.git', '--glob', '!node_modules', '--glob', '!dist'])
  call denite#custom#var('grep', 'command', ['rg'])

endif
'''

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['python', 'javascript', 'vue', 'html', 'css', 'markdown']
hook_add = '''
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '⚠'
" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" エラー表示の列を常時表示
let g:ale_sign_column_always = 1

" ファイルを開いたときにlint実行
let g:ale_lint_on_enter = 1
" ファイルを保存したときにlint実行
let g:ale_lint_on_save = 1
" 編集中のlintはしない
let g:ale_lint_on_text_changed = 'never'

" lint結果をロケーションリストとQuickFixには表示しない
" 出てると結構うざいしQuickFixを書き換えられるのは困る
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

" 有効にするlinter
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'python': ['flake8'],
\   'markdown': ['mdl'],
\   'shell': ['shellcheck'],
\   'cpp': ['clangd'],
\}
" エラー箇所に移動
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

